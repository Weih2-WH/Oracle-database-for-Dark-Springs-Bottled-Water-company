-- Generated by Oracle SQL Developer Data Modeler 21.4.1.349.1605
--   at:        2023-02-25 00:09:41 EST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g


drop sequence customer_seq;
drop sequence product_seq;
drop index consumer_name;
drop index product_name;
drop role HR_review;
drop role Financial;

drop table billdetail;
drop table bill;
drop table contractdetail;
drop table deliverydetail;
drop table leads;
drop table pickupdetail;
drop table product;
drop table servicedetail;
drop table evaluationdetail;
drop table evaluation;
drop table route;
drop table delivery;
drop table contract;
drop table customer;
drop table employee;
drop table evaluationweight;
drop table vehicle;

CREATE TABLE bill (
    total_amount         NUMBER(10, 2) NOT NULL,
    pay_date             DATE,
    due_date             DATE NOT NULL,
    bill_id              NUMBER NOT NULL,
    contract_contract_id NUMBER NOT NULL
);

COMMENT ON COLUMN bill.total_amount IS
    'Total pay amount for the bill.';

COMMENT ON COLUMN bill.pay_date IS
    'The date this bill has been payed.';

COMMENT ON COLUMN bill.due_date IS
    'Bill due date';

COMMENT ON COLUMN bill.bill_id IS
    'Unique Id of each monthly bill';

ALTER TABLE bill ADD CONSTRAINT bill_pk PRIMARY KEY ( bill_id );

CREATE TABLE billdetail (
    bill_detail_id       NUMBER NOT NULL,
    bill_bill_id         NUMBER NOT NULL,
    delivery_delivery_id NUMBER NOT NULL
);

COMMENT ON COLUMN billdetail.bill_detail_id IS
    'Unique Id for each bill detail.';

ALTER TABLE billdetail ADD CONSTRAINT billdetail_pk PRIMARY KEY ( bill_detail_id );

CREATE TABLE contract (
    contract_id          NUMBER NOT NULL,
    contract_name        VARCHAR2(50) NOT NULL,
    contract_date        DATE NOT NULL,
    service_start_date   DATE NOT NULL,
    service_end_date     DATE NOT NULL,
    payment              VARCHAR2(50) NOT NULL,
    employee_employee_id NUMBER NOT NULL,
    customer_customer_id NUMBER NOT NULL,
    monthly_fee          NUMBER
);

COMMENT ON COLUMN contract.contract_id IS
    'Unique ID for each contract.';

COMMENT ON COLUMN contract.contract_name IS
    'Contract name';

COMMENT ON COLUMN contract.contract_date IS
    'contract signed date';

COMMENT ON COLUMN contract.service_start_date IS
    'contract service start date.';

COMMENT ON COLUMN contract.service_end_date IS
    'Contract served end date.';

COMMENT ON COLUMN contract.payment IS
    'Payment of the contract';

ALTER TABLE contract ADD CONSTRAINT contract_pk PRIMARY KEY ( contract_id );

CREATE TABLE contractdetail (
    contract_detail_id   NUMBER NOT NULL,
    contract_contract_id NUMBER NOT NULL,
    product_product_id   NUMBER NOT NULL
);

COMMENT ON COLUMN contractdetail.contract_detail_id IS
    'Unique ID for each contract detail.';

ALTER TABLE contractdetail ADD CONSTRAINT contractdetail_pk PRIMARY KEY ( contract_detail_id );

CREATE TABLE customer (
    company        VARCHAR2(50) NOT NULL,
    customer_id    NUMBER NOT NULL,
    num_employee   NUMBER(8) NOT NULL,
    street_address VARCHAR2(50) NOT NULL,
    city           VARCHAR2(50) NOT NULL,
    state          VARCHAR2(50) NOT NULL,
    zip            VARCHAR2(6) NOT NULL,
    bonus          NUMBER(8, 2),
    first_name     VARCHAR2(50) NOT NULL,
    phone          VARCHAR2(20) NOT NULL,
    last_name      VARCHAR2(50) NOT NULL,
    email          VARCHAR2(50),
    type           VARCHAR2(50),
    referred_by    NUMBER
);

COMMENT ON COLUMN customer.company IS
    'customer company name';

COMMENT ON COLUMN customer.customer_id IS
    'Unique ID for all the customer in the company';

COMMENT ON COLUMN customer.num_employee IS
    'number of employee in the company used to estimate the usage of water';

COMMENT ON COLUMN customer.street_address IS
    'Company''s street address(bill)';

COMMENT ON COLUMN customer.city IS
    'City or town where the company is.(bill)';

COMMENT ON COLUMN customer.state IS
    '2-letter code for the state where the company is.(bill)';

COMMENT ON COLUMN customer.zip IS
    'Postal code where the company is.(bill)
';

COMMENT ON COLUMN customer.first_name IS
    'Contact person''s name of the company';

COMMENT ON COLUMN customer.phone IS
    'Contact number of company(bill)';

COMMENT ON COLUMN customer.last_name IS
    'Contact person''s last name';

COMMENT ON COLUMN customer.email IS
    'Contact email';

COMMENT ON COLUMN customer.type IS
    'Customer type(large,small)';

ALTER TABLE customer ADD CONSTRAINT customer_pk PRIMARY KEY ( customer_id );

CREATE TABLE delivery (
    delivery_id          NUMBER NOT NULL,
    vehicle_vehicle_id   NUMBER NOT NULL,
    assigned_date        DATE NOT NULL,
    arrived_time         DATE,
    departed_time        DATE,
    contract_contract_id NUMBER NOT NULL
);

COMMENT ON COLUMN delivery.delivery_id IS
    'Unique ID for delivery.';

COMMENT ON COLUMN delivery.assigned_date IS
    'Date that assigned the route.';

COMMENT ON COLUMN delivery.arrived_time IS
    'Delivery arrived time.';

COMMENT ON COLUMN delivery.departed_time IS
    'Delivery departed time.';

ALTER TABLE delivery ADD CONSTRAINT delivery_pk PRIMARY KEY ( delivery_id );

CREATE TABLE deliverydetail (
    quantity             NUMBER(10) NOT NULL,
    delivery_detail_id   NUMBER NOT NULL,
    driver_comments      VARCHAR2(50),
    delivery_delivery_id NUMBER NOT NULL,
    product_product_id   NUMBER NOT NULL
);

COMMENT ON COLUMN deliverydetail.quantity IS
    'quantity of the item.';

COMMENT ON COLUMN deliverydetail.delivery_detail_id IS
    'Unique ID for delivery detail.';

COMMENT ON COLUMN deliverydetail.driver_comments IS
    'driver comments';

ALTER TABLE deliverydetail ADD CONSTRAINT deliverydetail_pk PRIMARY KEY ( delivery_detail_id );

CREATE TABLE employee (
    employee_id    NUMBER NOT NULL,
    first_name     VARCHAR2(50) NOT NULL,
    last_name      VARCHAR2(50) NOT NULL,
    street_address VARCHAR2(50) NOT NULL,
    city           VARCHAR2(50) NOT NULL,
    state          VARCHAR2(50) NOT NULL,
    zip            VARCHAR2(6) NOT NULL,
    position       VARCHAR2(50) NOT NULL,
    phone          VARCHAR2(20) NOT NULL,
    hired_date     DATE NOT NULL,
    email          VARCHAR2(50) NOT NULL,
    tax_id         VARCHAR2(20) NOT NULL,
    weight_id      NUMBER,
    leave_date     DATE,
    manager_id     NUMBER
);

COMMENT ON COLUMN employee.employee_id IS
    'Unique ID for employee in company';

COMMENT ON COLUMN employee.first_name IS
    'First name of the employee';

COMMENT ON COLUMN employee.last_name IS
    'Last name of employee';

COMMENT ON COLUMN employee.street_address IS
    'Employee''s street address';

COMMENT ON COLUMN employee.city IS
    'City or town where the employee lives.';

COMMENT ON COLUMN employee.state IS
    '(2-letter code for the state where the employee lives.)';

COMMENT ON COLUMN employee.zip IS
    'Postal code where the employee lives.';

COMMENT ON COLUMN employee.position IS
    'Position of the employee';

COMMENT ON COLUMN employee.phone IS
    'Contact number of employee';

COMMENT ON COLUMN employee.hired_date IS
    'Hired date of the employee';

COMMENT ON COLUMN employee.email IS
    'Contact email of employee.';

COMMENT ON COLUMN employee.tax_id IS
    'Employee tax ID';

COMMENT ON COLUMN employee.leave_date IS
    'Employee leave date';

ALTER TABLE employee ADD CONSTRAINT employee_pk PRIMARY KEY ( employee_id );

CREATE TABLE evaluation (
    evaluation_id   NUMBER NOT NULL,
    evaluation_date DATE NOT NULL,
    total           NUMBER(10, 2),
    comments        VARCHAR2(50),
    employee_id     NUMBER NOT NULL,
    acc_score       NUMBER(10, 2)
);

COMMENT ON COLUMN evaluation.evaluation_id IS
    'Unique ID of evaluation record';

COMMENT ON COLUMN evaluation.evaluation_date IS
    'evaluation date';

COMMENT ON COLUMN evaluation.total IS
    'Total evaluation score.';

COMMENT ON COLUMN evaluation.comments IS
    'Comments';

COMMENT ON COLUMN evaluation.acc_score IS
    'Accumulated monthly evaluation score.';

ALTER TABLE evaluation ADD CONSTRAINT evaluation_pk PRIMARY KEY ( evaluation_id );

CREATE TABLE evaluationdetail (
    evaluation_detail_id     NUMBER NOT NULL,
    start_date               DATE NOT NULL,
    deliveries               NUMBER(10) NOT NULL,
    sales                    NUMBER(10, 2) NOT NULL,
    leads                    NUMBER(10, 2) NOT NULL,
    deliveries_eval          NUMBER(10, 2) NOT NULL,
    sales_eval               NUMBER(10, 2) NOT NULL,
    leads_eval               NUMBER NOT NULL,
    evaluation_evaluation_id NUMBER NOT NULL
);

ALTER TABLE evaluationdetail ADD CONSTRAINT evaluationdetail_pk PRIMARY KEY ( evaluation_detail_id );

CREATE TABLE evaluationweight (
    weight_id  NUMBER NOT NULL,
    deliveries NUMBER(10, 2) NOT NULL,
    sales      NUMBER(10, 2) NOT NULL,
    leads      NUMBER(10, 2) NOT NULL
);

COMMENT ON COLUMN evaluationweight.weight_id IS
    'Unique ID for weight';

COMMENT ON COLUMN evaluationweight.deliveries IS
    'Delivery weight';

COMMENT ON COLUMN evaluationweight.sales IS
    'Sales weight';

COMMENT ON COLUMN evaluationweight.leads IS
    'Lead weight';

ALTER TABLE evaluationweight ADD CONSTRAINT evaluationweight_pk PRIMARY KEY ( weight_id );

CREATE TABLE leads (
    type                 VARCHAR2(50) NOT NULL,
    "date"               DATE NOT NULL,
    lead_id              NUMBER NOT NULL,
    employee_employee_id NUMBER NOT NULL,
    customer_customer_id NUMBER NOT NULL
);

COMMENT ON COLUMN leads.type IS
    'Type of leads(service organization, department in same company, department in new company, large corporation)';

COMMENT ON COLUMN leads."date" IS
    'lead date';

COMMENT ON COLUMN leads.lead_id IS
    'Unique ID for leading.';

ALTER TABLE leads ADD CONSTRAINT leads_pk PRIMARY KEY ( lead_id );

CREATE TABLE pickupdetail (
    quantity             NUMBER(10) NOT NULL,
    pickup_id            NUMBER NOT NULL,
    customer_comments    VARCHAR2(50),
    delivery_delivery_id NUMBER NOT NULL,
    product_product_id   NUMBER NOT NULL,
    status               VARCHAR2(20)
);

COMMENT ON COLUMN pickupdetail.quantity IS
    'pick up number from customer';

COMMENT ON COLUMN pickupdetail.pickup_id IS
    'Unique ID for each pick up by customer';

COMMENT ON COLUMN pickupdetail.customer_comments IS
    'customer comments';

ALTER TABLE pickupdetail ADD CONSTRAINT pickupdetail_pk PRIMARY KEY ( pickup_id );

CREATE TABLE product (
    product_id   NUMBER NOT NULL,
    price        NUMBER(10, 2) NOT NULL,
    product_name VARCHAR2(50)
);

COMMENT ON COLUMN product.product_id IS
    'Unique Id for product';

COMMENT ON COLUMN product.price IS
    'Sale price for the product';

ALTER TABLE product ADD CONSTRAINT product_pk PRIMARY KEY ( product_id );

CREATE TABLE route (
    route_id    NUMBER NOT NULL,
    employee_id NUMBER NOT NULL
);

ALTER TABLE route ADD CONSTRAINT route_pk PRIMARY KEY ( route_id );

CREATE TABLE servicedetail (
    service_id           NUMBER NOT NULL,
    last_name            VARCHAR2(50) NOT NULL,
    first_name           VARCHAR2(50),
    street_address       VARCHAR2(50) NOT NULL,
    city                 VARCHAR2(50) NOT NULL,
    state                VARCHAR2(50) NOT NULL,
    zip                  VARCHAR2(6) NOT NULL,
    phone                VARCHAR2(20) NOT NULL,
    room                 VARCHAR2(50),
    customer_customer_id NUMBER NOT NULL,
    route_id             NUMBER NOT NULL
);

COMMENT ON COLUMN servicedetail.service_id IS
    'Unique ID for the location this company served.';

COMMENT ON COLUMN servicedetail.last_name IS
    'Delivered location contactor''s last name.';

COMMENT ON COLUMN servicedetail.first_name IS
    'Delivered location contactor''s first name.';

COMMENT ON COLUMN servicedetail.street_address IS
    'Delivered street address';

COMMENT ON COLUMN servicedetail.city IS
    'City or town where the product delivered.';

COMMENT ON COLUMN servicedetail.state IS
    '2-letter code for the state where the product delivered.';

COMMENT ON COLUMN servicedetail.zip IS
    'Postal code where the product delivered.';

COMMENT ON COLUMN servicedetail.phone IS
    'Contact number of the delivered location.';

COMMENT ON COLUMN servicedetail.room IS
    'Product delivered room.';

ALTER TABLE servicedetail ADD CONSTRAINT servicedetail_pk PRIMARY KEY ( service_id );

CREATE TABLE vehicle (
    vehicle_id   NUMBER NOT NULL,
    plate_number VARCHAR2(50) NOT NULL
);

ALTER TABLE vehicle ADD CONSTRAINT vehicle_pk PRIMARY KEY ( vehicle_id );

ALTER TABLE bill
    ADD CONSTRAINT bill_contract_fk FOREIGN KEY ( contract_contract_id )
        REFERENCES contract ( contract_id );

ALTER TABLE billdetail
    ADD CONSTRAINT billdetail_bill_fk FOREIGN KEY ( bill_bill_id )
        REFERENCES bill ( bill_id );

ALTER TABLE billdetail
    ADD CONSTRAINT billdetail_delivery_fk FOREIGN KEY ( delivery_delivery_id )
        REFERENCES delivery ( delivery_id );

ALTER TABLE contract
    ADD CONSTRAINT contract_customer_fk FOREIGN KEY ( customer_customer_id )
        REFERENCES customer ( customer_id );

ALTER TABLE contract
    ADD CONSTRAINT contract_employee_fk FOREIGN KEY ( employee_employee_id )
        REFERENCES employee ( employee_id );

ALTER TABLE contractdetail
    ADD CONSTRAINT contractdetail_contract_fk FOREIGN KEY ( contract_contract_id )
        REFERENCES contract ( contract_id );

ALTER TABLE contractdetail
    ADD CONSTRAINT contractdetail_product_fk FOREIGN KEY ( product_product_id )
        REFERENCES product ( product_id );

ALTER TABLE delivery
    ADD CONSTRAINT delivery_contract_fk FOREIGN KEY ( contract_contract_id )
        REFERENCES contract ( contract_id );

ALTER TABLE delivery
    ADD CONSTRAINT delivery_vehicle_fk FOREIGN KEY ( vehicle_vehicle_id )
        REFERENCES vehicle ( vehicle_id );

ALTER TABLE deliverydetail
    ADD CONSTRAINT deliverydetail_delivery_fk FOREIGN KEY ( delivery_delivery_id )
        REFERENCES delivery ( delivery_id );

ALTER TABLE deliverydetail
    ADD CONSTRAINT deliverydetail_product_fk FOREIGN KEY ( product_product_id )
        REFERENCES product ( product_id );

ALTER TABLE employee
    ADD CONSTRAINT employee_evaluationweight_fk FOREIGN KEY ( weight_id )
        REFERENCES evaluationweight ( weight_id );

ALTER TABLE evaluation
    ADD CONSTRAINT evaluation_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( employee_id );

ALTER TABLE evaluationdetail
    ADD CONSTRAINT evaluationdetail_evaluation_fk FOREIGN KEY ( evaluation_evaluation_id )
        REFERENCES evaluation ( evaluation_id );

ALTER TABLE leads
    ADD CONSTRAINT leads_customer_fk FOREIGN KEY ( customer_customer_id )
        REFERENCES customer ( customer_id );

ALTER TABLE leads
    ADD CONSTRAINT leads_employee_fk FOREIGN KEY ( employee_employee_id )
        REFERENCES employee ( employee_id );

ALTER TABLE pickupdetail
    ADD CONSTRAINT pickupdetail_delivery_fk FOREIGN KEY ( delivery_delivery_id )
        REFERENCES delivery ( delivery_id );

ALTER TABLE pickupdetail
    ADD CONSTRAINT pickupdetail_product_fk FOREIGN KEY ( product_product_id )
        REFERENCES product ( product_id );

ALTER TABLE route
    ADD CONSTRAINT route_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( employee_id );

ALTER TABLE servicedetail
    ADD CONSTRAINT servicedetail_customer_fk FOREIGN KEY ( customer_customer_id )
        REFERENCES customer ( customer_id );

ALTER TABLE servicedetail
    ADD CONSTRAINT servicedetail_route_fk FOREIGN KEY ( route_id )
        REFERENCES route ( route_id );





--CUSTOMER
INSERT INTO CUSTOMER VALUES('Appleseed', 201, 6, '5932 Phillips St', 'Pittsburgh', 'PA', 15217, 100, 'Luna', 4123456789, 'Fang', 'lunaf@cmu.edu', 'small business', NULL);                          
INSERT INTO CUSTOMER VALUES('Pear', 202, 2, '230 N Craig St', 'Pittsburgh', 'PA', 15213, 100, 'Pear', 4151145141, 'Hu', 'pearh@cmu.edu', 'small business', 201);                  
INSERT INTO CUSTOMER VALUES('Bananas', 203, 5, '1919 Forbes Ave', 'Berkeley', 'CA', 94709, 100, 'Brake', 5101919810, 'Zhang', 'brakez@berkeley.edu', 'service organization', 201);                       
INSERT INTO CUSTOMER VALUES('Beast Senpai', 204, 30, '5000 Forbes Ave', 'New York', 'NY', 10001, 100, 'James', 5141919810, 'Lee', 'jamesli@cmu.edu','larger corporation', 203);                         
INSERT INTO CUSTOMER VALUES('RedTeaSeller', 205, 114, '5934 Phillips Ave', 'Pittsburgh', 'PA', 15217, '100', 'Yanglin', 4153417046, 'Hu', 'yanglinh@andrew.cmu.edu', 'small business', 204);


-- PRODUCT
INSERT INTO PRODUCT VALUES(701, 10, 'large bottle water');
INSERT INTO PRODUCT VALUES(702, 5, 'middle bottle water');
INSERT INTO PRODUCT VALUES(703, 1, 'small bottle water');
INSERT INTO PRODUCT VALUES(704, 3, 'cup');
INSERT INTO PRODUCT VALUES(705, 2, 'holder');

--evaluationWeight
INSERT INTO evaluationweight VALUES (501, 15, 4, 30);
INSERT INTO evaluationweight VALUES (502, 20, 2, 30);

--Employee
INSERT INTO employee VALUES(101, 'Tom', 'Lee', '123 Forbes Avenue', 'Kansas', 'MO', 64144, 'Delivery Manager', '283-984-7623',to_date('05/01/2020', 'mm/dd/yyyy'), 'toml@dark.spring.com', 'aaa', null, null, null);	
INSERT INTO employee VALUES(102, 'Henry', 'Kim', '234 Forbes Avenue', 'Des Moines', 'IA', 50288, 'Delivery Manager', '642-897-2346',to_date('07/09/2020', 'mm/dd/yyyy'), 'henryk@dark.spring.com', 'bbb', null, null, null);
INSERT INTO employee VALUES(103, 'Sara', 'Chen', '345 Forbes Avenue', 'Kansas', 'MO', 64105, 'Delivery Person', '283-298-7438',to_date('09/24/2020', 'mm/dd/yyyy'), 'sarac@dark.spring.com', 'ccc', 501, null, 101);
INSERT INTO employee VALUES(104, 'Lisa', 'Zhou', '456 Forbes Avenue', 'Olathe', 'KS', 66031, 'Delivery Person', '253-374-7492',to_date('09/25/2020', 'mm/dd/yyyy'), 'lisaz@dark.spring.com', 'ddd', 502, null, 102);
INSERT INTO employee VALUES(105, 'Angela', 'Wang', '567 Forbes Avenue', 'Pittsburgh', 'PA', 15028, 'Marketing Manager', '412-883-4567',to_date('03/07/2021', 'mm/dd/yyyy'), 'angelaW@dark.spring.com', 'eee', null, null, null);


--Contract
insert into contract values (801,'contract 801', to_date('2021-08-01', 'yyyy-mm-dd'), to_date('2022-02-02', 'yyyy-mm-dd'), to_date('2022-03-31', 'yyyy-mm-dd'), 'cash', 103, 201, 60);
insert into contract values (802,'contract 802', to_date('2022-09-03', 'yyyy-mm-dd'), to_date('2022-02-03', 'yyyy-mm-dd'), to_date('2022-03-31', 'yyyy-mm-dd'),  'cash', 103, 202, 70);
insert into contract values (803, 'contract 803', to_date('2022-01-01',  'yyyy-mm-dd'), to_date('2022-02-08', 'yyyy-mm-dd'), to_date('2022-03-31', 'yyyy-mm-dd'), 'credit card', 103, 203, 80);
insert into contract values (804, 'contract 804', to_date('2022-02-15',  'yyyy-mm-dd'), to_date('2022-02-15', 'yyyy-mm-dd'),  to_date('2022-03-31', 'yyyy-mm-dd'), 'credit card', 104, 204, 70);
insert into contract values (805, 'contract 805', to_date('2022-02-19', 'yyyy-mm-dd'), to_date('2022-03-01', 'yyyy-mm-dd'), to_date('2022-03-31','yyyy-mm-dd'), 'credit card', 104, 205, 60);



--INSERT

--route
INSERT INTO route VALUES(2001, 103);
INSERT INTO route VALUES(2002, 103);
INSERT INTO route VALUES(2003, 104);

--LEADS
INSERT INTO LEADS VALUES('small business', to_date('2022-02-08', 'yyyy-mm-dd'), 2101, 103, 201);
INSERT INTO LEADS VALUES('service organization', to_date('2022-02-10','yyyy-mm-dd'), 2102, 104, 201);
INSERT INTO LEADS VALUES('small business', to_date('2022-02-08','yyyy-mm-dd'), 2103, 103, 203);
INSERT INTO LEADS VALUES('small business', to_date('2022-02-08', 'yyyy-mm-dd'), 2104, 104, 204);

--evaluation
INSERT INTO evaluation VALUES(401, to_date('03-01-2022', 'mm-dd-yyyy'), 7530, 'great', 103, 7530);
INSERT INTO evaluation VALUES(402, to_date('03-01-2022', 'mm-dd-yyyy'), 450, null, 104, 450);
INSERT INTO evaluation VALUES(403, to_date('04-01-2022', 'mm-dd-yyyy'), 9030, 'good job', 103, 16560);
INSERT INTO evaluation VALUES(404, to_date('04-01-2022', 'mm-dd-yyyy'), 4240, 'great', 104, 4690);

--evaluationDetail
INSERT INTO evaluationDetail VALUES(601, to_date('02-07-2022','mm-dd-yyyy'), 2 ,124, 0, 5, 5, 5, 401);
INSERT INTO evaluationDetail VALUES(602, to_date('02-07-2022', 'mm-dd-yyyy'), 0, 0, 0, 5, 3, 4, 402);
INSERT INTO evaluationDetail VALUES(603, to_date('02-14-2022','mm-dd-yyyy'), 0, 0, 1, 4, 4, 5, 401);
INSERT INTO evaluationDetail VALUES(604, to_date('02-14-2022', 'mm-dd-yyyy'), 0, 0, 1, 3, 4, 5, 402);
INSERT INTO evaluationDetail VALUES(605, to_date('02-21-2022','mm-dd-yyyy'), 2, 230, 0, 5, 5, 4, 401);
INSERT INTO evaluationDetail VALUES(606, to_date('02-21-2022', 'mm-dd-yyyy'), 1, 20, 0, 5, 5, 3, 402);
INSERT INTO evaluationDetail VALUES(607, to_date('02-28-2022','mm-dd-yyyy'), 0, 0, 0, 4, 4, 3, 401);
INSERT INTO evaluationDetail VALUES(608, to_date('02-28-2022','mm-dd-yyyy'), 0, 0, 0, 4, 4, 4, 402);
INSERT INTO evaluationDetail VALUES(609, to_date('03-07-2022','mm-dd-yyyy'), 2, 160, 0, 5, 5, 4, 403);
INSERT INTO evaluationDetail VALUES(610, to_date('03-07-2022','mm-dd-yyyy'), 2, 151, 0, 5, 5, 4, 404);
INSERT INTO evaluationDetail VALUES(611, to_date('03-14-2022','mm-dd-yyyy'), 2, 123, 0, 5, 5, 4, 403);
INSERT INTO evaluationDetail VALUES(612, to_date('03-14-2022','mm-dd-yyyy'), 0, 0, 0, 4, 4, 4, 404);
INSERT INTO evaluationDetail VALUES(613, to_date('03-21-2022','mm-dd-yyyy'), 22, 140, 1, 5, 5, 4, 403);
INSERT INTO evaluationDetail VALUES(614, to_date('03-21-2022','mm-dd-yyyy'), 0, 0, 0, 4, 4, 4, 404);
INSERT INTO evaluationDetail VALUES(615, to_date('03-28-2022','mm-dd-yyyy'), 0, 0, 0, 4, 4, 4, 403);
INSERT INTO evaluationDetail VALUES(616, to_date('03-28-2022','mm-dd-yyyy'), 1, 230, 1, 4, 5, 5, 404);

--serviceDetail
INSERT INTO serviceDetail VALUES(1001, 'Pony', 'Little', '300 Craig St', 'Pittsburgh', 'Pennsylvania', '15213', 4126805503, null, 201, 2001);
INSERT INTO serviceDetail VALUES(1002, 'Jack', 'Ma', '320 Craig St', 'Pittsburgh', 'Pennsylvania', '15213', 4126805505, null, 201, 2001);
INSERT INTO serviceDetail VALUES(1003, 'Kelly', 'King', '5956 Phillips Ave', 'Pittsburgh', 'Pennsylvania', '15217', 4126805509, null, 202, 2001);
INSERT INTO serviceDetail VALUES(1004, 'Jenny', 'Kim', '900 Forbes Ave', 'Pittsburgh', 'Pennsylvania', '15214', 4127896578, null, 202, 2001);
INSERT INTO serviceDetail VALUES(1005, 'Alice', 'Yu', '15 Redtea St', 'Pittsburgh', 'Pennsylvania', '15218', 4123456780, null, 203, 2002);
INSERT INTO serviceDetail VALUES(1006, 'Den', 'Ji', '514 Morewood Ave', 'Pittsburgh', 'Pennsylvania', '15214', 3416785431, null, 204, 2003);
INSERT INTO serviceDetail VALUES(1007, 'James', 'Jin', '114 Murray Ave', 'Pittsburgh', 'Pennsylvania', '15217', 9017654382, null, 205, 2003);


-- VEHICLE
INSERT INTO VEHICLE VALUES(1801, 'TR001');
INSERT INTO VEHICLE VALUES(1802, 'CAR001');
INSERT INTO VEHICLE VALUES(1803, 'MT001');

--Delivery
INSERT INTO delivery VALUES(901, 1801, To_date('2022-02-03', 'YYYY-MM-DD'), To_date('2022-02-05', 'YYYY-MM-DD'), To_date('2022-02-04', 'YYYY-MM-DD'), 801);
INSERT INTO delivery VALUES(902, 1801, To_date('2022-02-03', 'YYYY-MM-DD'), To_date('2022-02-05', 'YYYY-MM-DD'), To_date('2022-02-04', 'YYYY-MM-DD'), 802);
INSERT INTO delivery VALUES(903, 1802, To_date('2022-02-06', 'YYYY-MM-DD'), To_date('2022-02-17', 'YYYY-MM-DD'), To_date('2022-02-16', 'YYYY-MM-DD'), 804);
INSERT INTO delivery VALUES(904, 1802, To_date('2022-02-07', 'YYYY-MM-DD'), To_date('2022-02-19', 'YYYY-MM-DD'), To_date('2022-02-18', 'YYYY-MM-DD'), 801);
INSERT INTO delivery VALUES(905, 1802, To_date('2022-02-07', 'YYYY-MM-DD'), To_date('2022-02-19', 'YYYY-MM-DD'), To_date('2022-02-18', 'YYYY-MM-DD'), 802);
INSERT INTO delivery VALUES(906, 1801, To_date('2022-02-10', 'YYYY-MM-DD'), To_date('2022-03-02', 'YYYY-MM-DD'), To_date('2022-03-01', 'YYYY-MM-DD'), 801);
INSERT INTO delivery VALUES(907, 1801, To_date('2022-02-10', 'YYYY-MM-DD'), To_date('2022-03-02', 'YYYY-MM-DD'), To_date('2022-03-01', 'YYYY-MM-DD'), 802);
INSERT INTO delivery VALUES(908, 1801, To_date('2022-02-13', 'YYYY-MM-DD'), To_date('2022-03-02', 'YYYY-MM-DD'), To_date('2022-03-01', 'YYYY-MM-DD'), 804);
INSERT INTO delivery VALUES(909, 1801, To_date('2022-02-13', 'YYYY-MM-DD'), To_date('2022-03-02', 'YYYY-MM-DD'), To_date('2022-03-01', 'YYYY-MM-DD'), 805);
INSERT INTO delivery VALUES(910, 1802, To_date('2022-02-16', 'YYYY-MM-DD'), To_date('2022-03-06', 'YYYY-MM-DD'), To_date('2022-03-05', 'YYYY-MM-DD'), 801);
INSERT INTO delivery VALUES(911, 1802, To_date('2022-02-16', 'YYYY-MM-DD'), To_date('2022-03-06', 'YYYY-MM-DD'), To_date('2022-03-05', 'YYYY-MM-DD'), 802);
INSERT INTO delivery VALUES(912, 1801, To_date('2022-02-19', 'YYYY-MM-DD'), To_date('2022-03-16', 'YYYY-MM-DD'), To_date('2022-03-15', 'YYYY-MM-DD'), 801);
INSERT INTO delivery VALUES(913, 1801, To_date('2022-02-19', 'YYYY-MM-DD'), To_date('2022-03-16', 'YYYY-MM-DD'), To_date('2022-03-15', 'YYYY-MM-DD'), 802);
INSERT INTO delivery VALUES(914, 1802, To_date('2022-03-04', 'YYYY-MM-DD'), To_date('2022-03-20', 'YYYY-MM-DD'), To_date('2022-03-19', 'YYYY-MM-DD'), 804);
INSERT INTO delivery VALUES(915, 1802, To_date('2022-03-04', 'YYYY-MM-DD'), To_date('2022-03-20', 'YYYY-MM-DD'), To_date('2022-03-19', 'YYYY-MM-DD'), 805);


--deliveryDetail
INSERT INTO deliveryDetail VALUES(10, 1001, 'at the front door', 901, 701);
INSERT INTO deliveryDetail VALUES(20, 1002, null, 901, 702);
INSERT INTO deliveryDetail VALUES(2, 1003, null, 902, 701);
INSERT INTO deliveryDetail VALUES(2, 1004, null, 902, 705);
INSERT INTO deliveryDetail VALUES(4, 1005, 'left at the front door', 903, 701);
INSERT INTO deliveryDetail VALUES(4, 1006, null, 904, 701);
INSERT INTO deliveryDetail VALUES(30, 1007, null, 904, 702);
INSERT INTO deliveryDetail VALUES(30, 1008, 'meet at the front door', 905, 703);
INSERT INTO deliveryDetail VALUES(30, 1009, 'meet at the front door', 905, 704);
INSERT INTO deliveryDetail VALUES(10, 1010, null, 906, 701);
INSERT INTO deliveryDetail VALUES(5, 1011, null, 906, 703);
INSERT INTO deliveryDetail VALUES(20, 1012, null, 907, 701);
INSERT INTO deliveryDetail VALUES(2, 1013, 'left at the front desk', 907, 704);
INSERT INTO deliveryDetail VALUES(30, 1014, null, 908, 702);
INSERT INTO deliveryDetail VALUES(1, 1015, null, 908, 705);
INSERT INTO deliveryDetail VALUES(10, 1016, 'at the front door', 909, 701);
INSERT INTO deliveryDetail VALUES(20, 1017, null, 910, 702);
INSERT INTO deliveryDetail VALUES(2, 1018, null, 910, 701);
INSERT INTO deliveryDetail VALUES(2, 1019, 'left at the front desk', 911, 705);
INSERT INTO deliveryDetail VALUES(4, 1020, 'left at the front desk', 911, 701);
INSERT INTO deliveryDetail VALUES(4, 1021, 'left at the front desk', 911, 701);
INSERT INTO deliveryDetail VALUES(30, 1022, 'meet at the front desk', 912, 702);
INSERT INTO deliveryDetail VALUES(30, 1023, 'meet at the front desk', 912, 703);
INSERT INTO deliveryDetail VALUES(4, 1024, 'left at the front desk', 913, 701);
INSERT INTO deliveryDetail VALUES(4, 1025, null, 914, 701);
INSERT INTO deliveryDetail VALUES(30, 1026, null, 914, 702);
INSERT INTO deliveryDetail VALUES(30, 1027, 'meet at the front door', 915, 703);
INSERT INTO deliveryDetail VALUES(30, 1028, 'meet at the front door', 915, 704);


--PickupDetail
INSERT INTO pickupdetail VALUES(10, 1101, null, 901, 701, 'full');
INSERT INTO pickupdetail VALUES(20, 1102, null, 901, 702, 'full');
INSERT INTO pickupdetail VALUES(2, 1103, null, 902, 701, 'full');
INSERT INTO pickupdetail VALUES(2, 1104, null, 902, 705, 'empty');
INSERT INTO pickupdetail VALUES(4, 1105, null, 903, 701, 'empty');
INSERT INTO pickupdetail VALUES(4, 1106, null, 904, 701, 'empty');
INSERT INTO pickupdetail VALUES(30, 1107, 'all empty', 904, 702, 'empty');
INSERT INTO pickupdetail VALUES(30, 1108, null, 905, 703, 'empty');
INSERT INTO pickupdetail VALUES(30, 1109, null, 905, 704, 'empty');
INSERT INTO pickupdetail VALUES(10, 1110, null, 906, 701, 'empty');
INSERT INTO pickupdetail VALUES(5, 1111, null, 906, 703, 'empty');
INSERT INTO pickupdetail VALUES(20, 1112, null, 907, 701, 'empty');
INSERT INTO pickupdetail VALUES(2, 1113, null, 907, 704, 'empty');
INSERT INTO pickupdetail VALUES(30, 1114, null, 908, 702, 'empty');
INSERT INTO pickupdetail VALUES(1, 1115, null, 908, 705, 'full');
INSERT INTO pickupdetail VALUES(2, 1116, null, 909, 705, 'full');
INSERT INTO pickupdetail VALUES(4, 1117, null, 910, 701, 'half');
INSERT INTO pickupdetail VALUES(4, 1118, null, 911, 701, 'half');
INSERT INTO pickupdetail VALUES(30, 1119, null, 912, 702, 'half');
INSERT INTO pickupdetail VALUES(30, 1120, null, 912, 703, 'half');
INSERT INTO pickupdetail VALUES(30, 1121, null, 913, 704, 'empty');
INSERT INTO pickupdetail VALUES(6, 1122, null, 914, 701, 'full');
INSERT INTO pickupdetail VALUES(2, 1123, null, 915, 701, 'full');
INSERT INTO pickupdetail VALUES(20, 1124, null, 915, 702, 'full');


--contractDetail
INSERT INTO contractDetail VALUES(1401, 801, 701);
INSERT INTO contractDetail VALUES(1402, 801, 702);
INSERT INTO contractDetail VALUES(1403, 801, 703);
INSERT INTO contractDetail VALUES(1404, 801, 704);
INSERT INTO contractDetail VALUES(1405, 802, 701);
INSERT INTO contractDetail VALUES(1406, 802, 702);
INSERT INTO contractDetail VALUES(1407, 802, 703);
INSERT INTO contractDetail VALUES(1408, 802, 704);
INSERT INTO contractDetail VALUES(1409, 802, 705);
INSERT INTO contractDetail VALUES(1410, 803, 701);
INSERT INTO contractDetail VALUES(1411, 803, 702);
INSERT INTO contractDetail VALUES(1412, 803, 703);
INSERT INTO contractDetail VALUES(1413, 803, 704);
INSERT INTO contractDetail VALUES(1414, 803, 705);
INSERT INTO contractDetail VALUES(1415, 804, 701);
INSERT INTO contractDetail VALUES(1416, 804, 702);
INSERT INTO contractDetail VALUES(1417, 804, 703);
INSERT INTO contractDetail VALUES(1418, 804, 704);
INSERT INTO contractDetail VALUES(1419, 804, 705);
INSERT INTO contractDetail VALUES(1420, 805, 701);
INSERT INTO contractDetail VALUES(1421, 805, 702);
INSERT INTO contractDetail VALUES(1422, 805, 703);

--bill
INSERT INTO BILL VALUES(410, TO_DATE('2022-02-05','YYYY-MM-DD'), TO_DATE('2022-02-28','YYYY-MM-DD'), 1201, 801);
INSERT INTO BILL VALUES(44, TO_DATE('2022-02-18','YYYY-MM-DD'), TO_DATE('2022-02-28','YYYY-MM-DD'), 1202, 802);
INSERT INTO BILL VALUES(60, TO_DATE('2022-02-18','YYYY-MM-DD'), TO_DATE('2022-02-28','YYYY-MM-DD'), 1203, 804);
INSERT INTO BILL VALUES(405, TO_DATE('2022-03-16','YYYY-MM-DD'), TO_DATE('2022-03-31','YYYY-MM-DD'), 1204, 801);
INSERT INTO BILL VALUES(360, TO_DATE('2022-03-17','YYYY-MM-DD'), TO_DATE('2022-03-31','YYYY-MM-DD'), 1205, 802);
INSERT INTO BILL VALUES(362, TO_DATE('2022-03-20','YYYY-MM-DD'), TO_DATE('2022-03-31','YYYY-MM-DD'), 1206, 804);
INSERT INTO BILL VALUES(240, TO_DATE('2022-03-20','YYYY-MM-DD'), TO_DATE('2022-03-31','YYYY-MM-DD'), 1207, 805);

--billDetail
INSERT INTO BILLDETAIL VALUES (1301, 1201, 901);
INSERT INTO BILLDETAIL VALUES (1302, 1202, 902);
INSERT INTO BILLDETAIL VALUES (1303, 1203, 903);
INSERT INTO BILLDETAIL VALUES (1304, 1201, 904);
INSERT INTO BILLDETAIL VALUES (1305, 1202, 905);
INSERT INTO BILLDETAIL VALUES (1306, 1204, 906);
INSERT INTO BILLDETAIL VALUES (1307, 1202, 907);
INSERT INTO BILLDETAIL VALUES (1308, 1203, 908);
INSERT INTO BILLDETAIL VALUES (1309, 1207, 909);
INSERT INTO BILLDETAIL VALUES (1310, 1204, 910);
INSERT INTO BILLDETAIL VALUES (1311, 1205, 911);
INSERT INTO BILLDETAIL VALUES (1312, 1204, 912);
INSERT INTO BILLDETAIL VALUES (1313, 1205, 913);
INSERT INTO BILLDETAIL VALUES (1314, 1206, 914);
INSERT INTO BILLDETAIL VALUES (1315, 1207, 915);

commit;

--OBJECTS

--sequence

CREATE SEQUENCE customer_seq 
INCREMENT BY 1 
START WITH 206; 

CREATE SEQUENCE product_seq 
INCREMENT BY 1 
START WITH 706; 

--view

CREATE OR REPLACE VIEW BILL_DETAIL AS 
    SELECT b.bill_id, b.total_amount, b.pay_date, b.due_date, bd.bill_detail_id, bd.delivery_delivery_id
    FROM BILL b, BILLDETAIL bd;

CREATE OR REPLACE VIEW delivery_route_view AS
SELECT r.route_id, r.employee_id, c.customer_id, s. service_id
FROM route r JOIN serviceDetail s ON r.route_id = s.route_id
JOIN customer c ON c.customer_id = s.Customer_customer_id;

--procedure
CREATE OR REPLACE PROCEDURE add_new_product (v_product_id IN product.product_id%TYPE,v_price IN product.price%TYPE) AS 
    id_already_exist EXCEPTION;
    product_id_c product.product_id%TYPE;
BEGIN
    dbms_output.put_line('add_new_product : ');
    insert into product (product_id,price)  values(v_product_id,v_price);
    commit;
     DBMS_OUTPUT.PUT_LINE('insert success');
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('ID already exist.');
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Something wrong!');
END;
/


CREATE OR REPLACE PROCEDURE employee_leave (v_employee_id IN employee.employee_id%TYPE,v_leave_date IN employee.leave_date%TYPE) AS 
    wrong_employee_id EXCEPTION;
    employee_id_c employee.employee_id%TYPE;
BEGIN
    dbms_output.put_line('add_new_product : ');
    Select employee_id INTO employee_id_c from employee where employee_id = v_employee_id;
    IF employee_id_c is null then
	RAISE wrong_employee_id;
    END IF;
    dbms_output.put_line('update Valide: ');
    UPDATE employee SET leave_date = v_leave_date where employee_id = v_employee_id ;
    dbms_output.put_line('UPDATE Complet: ');
    commit;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('ID already exist.');
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Something wrong!');
END;
/


-- function

-- return the bill number of given month
CREATE OR REPLACE function count_bill(month_number number) return number
as
  bill_count number;
begin
    select count(*) into bill_count from bill 
    where TRIM(LEADING '0' FROM TO_CHAR(due_date, 'MM-YYYY')) = month_number;
    return bill_count;
end;

--package


CREATE OR REPLACE PACKAGE update_evaluation_pkg AS

  -- Procedure to update evaluation and evaluation details of a specific employee
  -- input employee id to calculate his new evaluation score with new input weights
  PROCEDURE update_evaluation (
    p_employee_id IN NUMBER,
    p_new_deliveries_weight IN NUMBER, -- new deliveries weight in evaluationWeight
    p_new_sales_weight IN NUMBER, -- new sales weight in evaluationWeight
    p_new_leads_weight IN NUMBER -- new leads weight in evaluationWeight
  );

END update_evaluation_pkg;
/

CREATE OR REPLACE PACKAGE BODY update_evaluation_pkg AS

  -- Procedure to update evaluation and evaluation details of a specific employee
  PROCEDURE update_evaluation (
    p_employee_id IN NUMBER,
    p_new_deliveries_weight IN NUMBER, -- new deliveries weight in evaluationWeight
    p_new_sales_weight IN NUMBER, -- new sales weight in evaluationWeight
    p_new_leads_weight IN NUMBER -- new leads weight in evaluationWeight
  ) AS
    -- Variables to store evaluation and evaluation detail IDs
    l_weight_id NUMBER; -- variable to store weight_id
    l_eval_id NUMBER; -- variable to store evaluation_id
    -- l_evaldetail_id NUMBER; 
    -- Variable to store the calculated evaluation total score
    l_total NUMBER;
  BEGIN

    -- Get weight ID for the employee
    SELECT weight_id
    INTO l_weight_id
    FROM Employee
    WHERE employee_id = p_employee_id;

    -- Get the evaluation ID for the employee
    SELECT evaluation_id
    INTO l_eval_id
    FROM evaluation
    WHERE employee_id = p_employee_id AND rownum = 1;

    -- -- Get the evaluation detail ID with evaluation ID for the employee
    -- -- Should be 4-5 evaluation_detail_id for each evaluation_id
    -- SELECT evaluation_detail_id
    -- INTO l_evaldetail_id
    -- FROM evaluationdetail
    -- WHERE evaluation_evaluation_id = l_eval_id;



    -- UPDATE evaluationWeight table
    UPDATE evaluationWeight
    SET deliveries = p_new_deliveries_weight, sales = p_new_sales_weight, leads = p_new_leads_weight
    WHERE weight_id = l_weight_id;

    -- Recalculate the evaluation score based on the new weight
    SELECT 
    (
        SELECT SUM(deliveries * deliveries_eval * p_new_deliveries_weight + sales * sales_eval * p_new_sales_weight + leads * leads_eval * p_new_leads_weight) 
        FROM evaluationdetail 
        WHERE evaluation_evaluation_id = l_eval_id
    )
    INTO l_total
    FROM evaluation
    WHERE evaluation_id = l_eval_id;

    -- Update the evaluation score for the employee
    UPDATE evaluation
    SET acc_score = acc_score - total + l_total, total = l_total
    WHERE evaluation_id = l_eval_id;

  END update_evaluation;

END update_evaluation_pkg;
/

--trigger

CREATE OR REPLACE TRIGGER check_jobs
BEFORE INSERT OR UPDATE ON Route
FOR EACH ROW
DECLARE
   count_jobs NUMBER;
   too_many_jobs EXCEPTION;
BEGIN
   SELECT count(*) INTO count_jobs FROM Route WHERE employee_id = :new.employee_id;
   IF count_jobs >= 3 THEN
     RAISE too_many_jobs;
   END IF;
   
   EXCEPTION
   WHEN too_many_jobs THEN
      DBMS_OUTPUT.PUT_LINE('Too many jobs for '|| :new.employee_id);
END;
/


CREATE OR REPLACE TRIGGER delete_evaluation
BEFORE DELETE ON Evaluation
FOR EACH ROW
BEGIN
  DELETE FROM EvaluationDetail WHERE evaluation_evaluation_id = :old.evaluation_id;
END;
/

--schedule

/*
The monthly fee will be charged every month when a customer has ordered and received any products of 
our company according to the amount in the contract based on the deliver location.

If a customer has not ordered any, then we will not charge on this customer. 
If a customer has ordered some products, no matter how many, the charge will be added on total amount
(including the product price and the monthly fee).
*/

create or replace procedure insert_bill_procedure(
    original_amount out number, 
    renewed_amount out number,
    v_date in out date,
    cur_date in out date) as
    cursor c_month_fee is 
    select c.contract_id, c.monthly_fee, b.bill_id, b.total_amount, b.due_date
    from bill b  
    join contract c 
    on b.contract_contract_id = c.contract_id;

begin
     select TRIM(LEADING '0' FROM TO_CHAR(sysdate, 'MM-YYYY')) into v_date from dual;
     
     for con in c_month_fee loop
        cur_date := TRIM(LEADING '0' FROM TO_CHAR(con.due_date, 'MM-YYYY'));
        if cur_date = v_date then
            original_amount := con.total_amount + con.monthly_fee;
            renewed_amount := original_amount + con.monthly_fee;
        end if;
        update bill set bill.total_amount = renewed_amount where bill.bill_id = con.bill_id;
     end loop;
end;





begin
  dbms_scheduler.create_job(
  job_name   => 'monthly_bill_generate',
  job_type   => 'STORED_PROCEDURE',
  job_action => 'insert_bill_procedure',
  start_date =>  SYSDATE,
  repeat_interval => 'FREQ = MONTHLY; INTERVAL = 1',
  comments   => 'monthly_bill');
end;
/



/*
The evaluation information of th eemployees who have left will be reserved for 3 years,
if exceeding, the relevant evaluation row will be deleted.
*/

create or replace procedure drop_oldstaff_evaluation(v_date in out date) as 
    cursor c_leave_eva is 
    select em.employee_id, ev.evaluation_id, em.leave_date
    from employee em
    left join evaluation ev
    on em.employee_id = ev.employee_id
    where em.leave_date is not null;
begin
    select sysdate into v_date from dual;
    for c in c_leave_eva loop
        if v_date - c.leave_date >= 3*365 then 
            delete from evaluation 
            where evaluation.employee_id = c.employee_id;
        end if;
    end loop;
end;





begin
  dbms_scheduler.create_job(
  job_name   => 'yearly_delete_evaluation',
  job_type   => 'STORED_PROCEDURE',
  job_action => 'drop_oldstaff_evaluation',
  start_date =>  SYSDATE,
  repeat_interval => 'FREQ = YEARLY; INTERVAL = 1',
  comments   => 'evaluation_drop');
end;
/


--role

CREATE ROLE HR_REVIEW; 

GRANT SELECT on EMPLOYEE to HR_REVIEW; 
GRANT INSERT on EMPLOYEE to HR_REVIEW; 
GRANT UPDATE on EMPLOYEE to HR_REVIEW; 

GRANT SELECT on EVALUATION to HR_REVIEW; 
GRANT INSERT on EVALUATION to HR_REVIEW; 
GRANT UPDATE on EVALUATION to HR_REVIEW; 
GRANT DELETE on EVALUATION to HR_REVIEW; 

GRANT SELECT on EVALUATIONWEIGHT to HR_REVIEW; 
GRANT INSERT on EVALUATIONWEIGHT to HR_REVIEW; 
GRANT UPDATE on EVALUATIONWEIGHT to HR_REVIEW; 
GRANT DELETE on EVALUATIONWEIGHT to HR_REVIEW; 

GRANT HR_REVIEW TO Managers; 

CREATE ROLE FINANCIAL;

GRANT SELECT on BILL to FINANCIAL; 
GRANT INSERT on BILL to FINANCIAL; 
GRANT UPDATE on BILL to FINANCIAL; 
GRANT DELETE on BILL to FINANCIAL; 

GRANT SELECT on BILLDETAIL to FINANCIAL; 
GRANT INSERT on BILLDETAIL to FINANCIAL; 
GRANT UPDATE on BILLDETAIL to FINANCIAL; 
GRANT DELETE on BILLDETAIL to FINANCIAL; 

GRANT FINANCIAL TO Managers;

--denormalization

--De-normalize Vehicle table and delivery table
--We initially separated the Vehicle information from delivery to normalize the data. However, we later discovered that the separate Vehicle table had more drawbacks than benefits for our purposes. This is because normalization is intended to reduce data redundancy, but in the case of the Vehicle data, we only require the license plate number, which is the sole piece of information stored in the Vehicle table. To achieve normalization, we would need to add a UID for each vehicle, resulting in the database storing additional information beyond just the license plate number. As a result, the benefits of normalization in this scenario were outweighed by the drawbacks.

--Additionally, in our assumptions, we found that most of the time when we need delivery information, we also need the license plate number. With this in mind, every time we required the vehicle information, we had to join another table, Vehicle, to obtain the information, which made the query more complicated. Consequently, we decided to denormalize this table, Vehicle, and place the vehicle information in the delivery table instead of separating it into a distinct table.

--index

CREATE INDEX customer_name
ON CUSTOMER (FIRST_NAME, LAST_NAME);

CREATE INDEX PRODUCT_NAME
ON PRODUCT (PRODUCT_NAME);










